!!VERSION 1.0

Code "Infinite Rings" by "SuperSonic16"
Write<uint>(GetPointer(0x1E5E2F0, 0x5B8), 0x3E7)

Patch "Disable Ring Cap" by "SuperSonic16"
WriteProtected<ushort>(0xE68522, 0xDEB)
WriteProtected<byte>(0x1098E5F, 0xEB)

Patch "Disable Damage" by "SuperSonic16"
WriteNop(0xE2836A, 0x5)

Patch "Infinite Lives" by "CodenameGamma"
WriteNop(0xD59A67, 0x6)

Patch "Always Run in the Background" by "SuperSonic16"
WriteProtected<byte>(0xE7BF04, 0xEB)

Patch "Never Lose Rings With Super Sonic" by "Muzzarino"
WriteNop(0xE64E80, 6)

Code "Can Always Activate Super Sonic" by "Muzzarino"
WriteProtected<byte>(0x11D33A4, 0xEB)
WriteProtected<byte>(0xE634C5, 0)
WriteProtected<byte>(0x11D67DC, 0xEB)
WriteProtected<byte>(0x111773A, 0xEB)
WriteProtected<byte>(0xE55D6A, 0x0)
WriteProtected<byte>(0xE632F1, 0x0)
WriteProtected<byte>(0xE634C7, 0x0)
var ptr0 = GetPointer(0x1E5E2F0, 0x1A5)
var ptr1 = GetPointer(0x1E5E2F0, 0x1228)
if (ptr0 != 0 && ptr1 != 0)
{
    Write<byte>(ptr0, (byte)(Read<byte>(ptr0) | 0x10))
    Write<byte>(ptr1, (byte)(Read<byte>(ptr1) | 0x10))
}

Code "Widescreen Support" by "Muzzarino"
Double width = (Double)Read<uint>(0x01DFE228)
Double height = (Double)Read<uint>(0x01DFE22C)
Double defaultwidth = 1280.0
Double defaultheight = 720.0
Double aspect = width / height
Double condaspect = 1.777777777777777778
WriteProtected<double>(0x01703EA0,defaultheight * condaspect / (aspect < condaspect ? aspect : condaspect))
WriteProtected<double>(0x01703EA8,Read<double>(0x01703EA0) * aspect)
WriteProtected(0x6754D0,0xC3)
Double xoffset = (Read<double>(0x01703EA8) - defaultwidth) * 0.5
Double yoffset = (Read<double>(0x01703EA0) - defaultheight) * 0.5
WriteProtected<float>(0x01B23F10,Read<float>(0x01B23F08) * (float)xoffset)
WriteProtected<float>(0x01B23F14,Read<float>(0x01B23F0C) * (float)yoffset)
WriteProtected<float>(0x013EA85C,200f + (float)yoffset)
WriteProtected<float>(0x017041F8,880f + (float)xoffset)
WriteProtected<float>(0x01703CA8,400f + (float)xoffset)
WriteProtected<double>(0x01703CA0,640 + xoffset)
WriteProtected<float>(0x016866E4,(float)Read<double>(0x01703CA0))
WriteProtected<double>(0x01703F58,259 + yoffset)

string code = @"fild dword ptr [0x01DFE228]
fidiv dword ptr [0x01DFE22C]
fld st(0)
fld dword ptr [0x01703B38]
fdiv dword ptr [0x016D2E4C]
fld st(0)
fcomi st(0),st(2)
fcmovb st(0),st(2)
fdivp st(2),st(0)
fdivp st(2),st(0)
fmulp st(2),st(0)
fmul dword ptr [ebp+0x10]
fstp dword ptr [ebp+0x10]
fld st(0)
fdiv dword ptr [ebp+0x10]"

string code2 = @"fld st(0)
fild dword ptr [0x01DFE228]
fidiv dword ptr [0x01DFE22C]
fdivrp st(1),st(0)
fmulp st(1),st(0)
fstp dword ptr [esi+0xB8]"

string code3 = @"fld qword ptr [0x01703EA8]
fsub dword ptr [0x01703B38]
fmul qword ptr [0x017038F8]
fchs
fstp dword ptr [ecx+0x60]
fld qword ptr [0x01703EA0]
fsub dword ptr [0x016D2E4C]
fmul qword ptr [0x017038F8]
fsubr dword ptr [ecx+0x64]
fstp dword ptr [ecx+0x64]"

string code4 = @"mov eax,0x679B50
fld qword ptr [0x01703EA8]
fsub dword ptr [0x01703B38]
fmul qword ptr [0x017038F8]
fadd dword ptr [esp]
fstp dword ptr [esp]
fld qword ptr [0x01703EA0]
fsub dword ptr [0x016D2E4C]
fadd dword ptr [esp+0x4]
fstp dword ptr [esp+0x4]
call eax"

string code5 = @"fild dword ptr [0x01DFE228]
fidiv dword ptr [0x01DFE22C]
fld dword ptr [0x01703B38]
fdiv dword ptr [0x016D2E4C]
fcomi st(0),st(1)
fcmovb st(0),st(1)
fdivp st(1),st(0)
fld dword ptr [0x01703B38]
fdiv dword ptr [0x016D2E4C]
fild dword ptr [0x01DFE228]
fidiv dword ptr [0x01DFE22C]
fdivp st(1),st(0)
fmul st(0),st(1)
fmul qword ptr [0x017038F8]
fsub qword ptr [0x017038F8]
fchs
fst dword ptr [esp+0x18]
fld1
fsubrp st(1),st(0)
fstp dword ptr [esp+0x20]
fmul qword ptr [0x017038F8]
fsub qword ptr [0x017038F8]
fchs
fst dword ptr [esp+0x1C]
fld1
fsubrp st(1),st(0)
fstp dword ptr [esp+0x24]
cmp byte ptr [edi+0x30],00"

string code6 = @"fild dword ptr [0x01DFE228]
fidiv dword ptr [0x01DFE22C]
fld dword ptr [0x01703B38]
fdiv dword ptr [0x016D2E4C]
fcomi st(0),st(1)
fcmovb st(0),st(1)
fdivp st(1),st(0)
push 00
fstp dword ptr [esp]
movss xmm0,[esp]
fld dword ptr [0x01703B38]
fdiv dword ptr [0x016D2E4C]
fild dword ptr [0x01DFE228]
fidiv dword ptr [0x01DFE22C]
fdivp st(1),st(0)
fmul dword ptr [esp]
fmul qword ptr [0x017038F8]
fsub qword ptr [0x017038F8]
fchs
fstp dword ptr [esp]
movss xmm1,[esp]
add esp,04
cvtps2pd xmm0,xmm0"

string code7 = @"fild dword ptr [0x01DFE228]
fidiv dword ptr [0x01DFE22C]
fld dword ptr [0x01703B38]
fdiv dword ptr [0x016D2E4C]
fcomi st(0),st(1)
fcmovb st(0),st(1)
fdivp st(1),st(0)
push 00
fstp dword ptr [esp]
fld dword ptr [0x01703B38]
fdiv dword ptr [0x016D2E4C]
fild dword ptr [0x01DFE228]
fidiv dword ptr [0x01DFE22C]
fdivp st(1),st(0)
fmul dword ptr [esp]
fmul qword ptr [0x017038F8]
fsub qword ptr [0x017038F8]
fchs
fld1
fsubrp st(1),st(0)
fstp dword ptr [esp]
movss xmm2,[esp]
add esp,04"

string code8 = @"fild dword ptr [0x01DFE228]
fidiv dword ptr [0x01DFE22C]
fld st(0)
fild dword ptr [edi+0xF0]
fidiv dword ptr [edi+0xF4]
fdivr st(2),st(0)
fcomi st(0),st(1)
fcmovb st(0),st(1)
fdivp st(1),st(0)
fmul st(1),st(0)
fmul qword ptr [0x017038F8]
fsub qword ptr [0x017038F8]
fchs
fst dword ptr [esp+0x48]
fld1
fsubrp st(1),st(0)
fstp dword ptr [esp+0x50]
fmul qword ptr [0x017038F8]
fsub qword ptr [0x017038F8]
fchs
fst dword ptr [esp+0x44]
fld1
fsubrp st(1),st(0)
fstp dword ptr [esp+0x4C]"

string code9 = @"fld st(0)
fild dword ptr [0x01DFE228]
fidiv dword ptr [0x01DFE22C]
fdivrp st(1),st(0)
fmulp st(1),st(0)"

if (Read<uint>(0x6F23C6) == 0x75D8C0D9 &&
Read<ushort>(0x64928A) == 0x9ED9 &&
Read<uint>(0xD08F88) == 0x49100FF3 &&
Read<uint>(0xD09112) == 0xFF970A3A &&
Read<uint>(0x1059D37) == 0x44110FF3 &&
Read<uint>(0xB1D845) == 0xFC9570F &&
Read<uint>(0xB1D86F) == 0x15100FF3 &&
Read<uint>(0x57876F) == 0x44110FF3 &&
Read<ushort>(0x789A04) == 0x87D9)
{
	WriteAsmHook(code, 0x6F23C6, HookBehavior.Replace)
	WriteAsmHook(code2, 0x64928A, HookBehavior.Replace)
	WriteAsmHook(code3, 0xD08F88, HookBehavior.After)
	WriteAsmHook(code4, 0xD09111, HookBehavior.Replace)
	WriteAsmHook(code5, 0x1059D37, HookBehavior.Before)
	WriteAsmHook(code6, 0xB1D845, HookBehavior.Replace)
	WriteAsmHook(code7, 0xB1D86F, HookBehavior.Replace)
	WriteAsmHook(code8, 0x57876F, HookBehavior.Before)
	WriteAsmHook(code9, 0x789A04, HookBehavior.Before)
}

Patch "Field of View Adjustment" by "Muzzarino"
string code = @"push 0x3F800000
fdiv dword ptr [esp]
add esp,0x04
fstp dword ptr [esp+0x0C]
fld dword ptr [ebp+0x14]"
WriteAsmHook(code, 0x6F23AA, HookBehavior.Replace)

Patch "Bypass Boss Key Check" by "Muzzarino"
WriteProtected<byte>(0xEFB9FC, 0xEB)
WriteProtected<byte>(0xEFA160, 0x0)
WriteProtected<byte>(0x108B6DA, 0x0)
WriteProtected<byte>(0x108B6E7, 0x0)
WriteProtected<byte>(0x108B6D5, 0x0)
WriteProtected<byte>(0x4DA787, 0x0)
WriteProtected<byte>(0x4DA787, 0x8C)

Patch "Have All Chaos Emeralds" by "Muzzarino"
WriteProtected<uint>(0x108BB11, 0x900300C6)
WriteProtected<byte>(0x108BB15, 0x90)
WriteProtected<ushort>(0x108BB1F, 0x34EB)

Patch "Sparkles Remain on the Hub World" by "Muzzarino"
WriteProtected<ushort>(0xEE3DA6, 0x6EB)

Patch "Win Challenges Without Meeting the Required Amount of Items" by "Muzzarino"
WriteProtected<uint>(0xD0EAB9, 0xCCC301B0)

Code "Infinite Boost Gauge" by "Zoney"
Write<float>(GetPointer(0x1E5E2F0, 0x5BC), 500)

Patch "All Levels are Selectable" by "Muzzarino"
WriteProtected<byte>(0xEE5DE8, 0xC)
WriteProtected<byte>(0xEE6134, 0xC)

Patch "Buy Anything at the Skill Shop With Any Points" by "Muzzarino"
WriteNop(0x4409D2, 6)

Patch "Never Subtract Points When Buying a Skill" by "Muzzarino"
WriteNop(0x440726, 6)

Patch "All Levels Display Names Even If Not Unlocked"  by "Muzzarino"
WriteProtected<byte>(0xD58AD0, 0xEB)

Patch "Replay Rescue Cutscenes" by "Muzzarino"
WriteProtected<ushort>(0xD29532, 0x6EB)

Patch "Color Dodge Trail Blending" by "Muzzarino"
WriteProtected<byte>(0xE8D3AC, 0x9)

Patch "Lighten Trail Blending" by "Muzzarino"
WriteProtected<byte>(0xE8D3AC, 0xA)

Patch "Screen Trail Blending" by "Muzzarino"
WriteProtected<byte>(0xE8D3AC, 0x2)
WriteProtected<byte>(0xE8D3B7, 0x4)

Patch "Color Burn Trail Blending" by "Muzzarino"
WriteProtected<byte>(0xE8D3B7, 0x3)

Patch "Opaque Trail Blending" by "Muzzarino"
WriteProtected<byte>(0xE8D3B7, 0x1)

Patch "Normal Trail Blending" by "Muzzarino"
WriteProtected<byte>(0xE8D3B7, 0x6)

Patch "Glowing Trail Blending" by "Muzzarino"
WriteProtected<byte>(0xE8D3B7, 0x7)

Patch "Subtractive Trail Blending" by "Muzzarino"
WriteProtected<byte>(0xE8D3AC, 0xB)

Patch "Subtitles Appear Additive If Color Is Bright" by "Muzzarino"
WriteProtected<byte>(0x40FED4, 0xE9)
WriteProtected<uint>(0x40FED5, 0xFB1DBE)
WriteNop(0x40FED9, 2)
WriteProtected<uint>(0x13C1C97, 0x80FB8053)
WriteProtected<ushort>(0x13C1C9B, 0x2070)
WriteProtected<ushort>(0x13C1C9D, 0xEBC1)
WriteProtected<uint>(0x13C1C9F, 0x80FB8008)
WriteProtected<ushort>(0x13C1CA3, 0x1870)
WriteProtected<ushort>(0x13C1CA5, 0xEBC1)
WriteProtected<uint>(0x13C1CA7, 0x80FB8008)
WriteProtected<ushort>(0x13C1CAB, 0x1070)
WriteProtected<uint>(0x13C1CAD, 0x54840C7)
WriteProtected<uint>(0x13C1CB4, 0x24C40C7)
WriteProtected<ushort>(0x13C1CBB, 0x7EB)
WriteProtected<uint>(0x13C1CBD, 0x64C40C7)
WriteProtected<ushort>(0x13C1CC4, 0x1C8B)
WriteProtected<uint>(0x13C1CC6, 0x4C48324)
WriteProtected<byte>(0x13C1CCA, 0xE9)
WriteProtected<uint>(0x13C1CCB, 0xFF04E20C)

Patch "Freeze Timer" by "Muzzarino"
WriteNop(0xD02E48, 8)

Patch "Freeze Challenge Timer" by "Muzzarino"
WriteNop(0x124EFC5, 8)
WriteNop(0xD0E7D5, 2)

Patch "Don't Allow Timer to Reduce Ranks on Challenges"  by "Muzzarino"
WriteProtected<uint>(0xD611B3, 0x90C0570F)
WriteNop(0xD611B7, 4)

Patch "Set Shadowmaps to 512x" by "Darío"
WriteProtected<uint>(0x10C6039, 512)

Patch "Set Shadowmaps to 2048x" by "Darío"
WriteProtected<uint>(0x10C6039, 2048)

Patch "Set Shadowmaps to 4096x" by "Darío"
WriteProtected<uint>(0x10C6039, 4096)

Patch "Set Shadowmaps to 8192x" by "Darío"
WriteProtected<uint>(0x10C6039, 8192)

Patch "1280x720 Media Player" by "N69"
WriteProtected<ushort>(0xB210A1, 1280)
WriteProtected<ushort>(0xB210B1, 720)

Patch "1920x1080 Media Player" by "N69"
WriteProtected<ushort>(0xB210A1, 1920)
WriteProtected<ushort>(0xB210B1, 1080)

Code "29.97 FPS Lock" by "PTKickass"
Write<float>(0x19FD2C, 29.97f)

Code "30 FPS Speed Lock" by "Skyth"
Write<float>(0x19FD2C, 30)
WriteNop(0xE7B5D7, 2)
WriteProtected<float>(0x1704258, 0.0333333333333334f)

Code "59.94 FPS Lock" by "PTKickass"
Write<float>(0x19FD2C, 59.94f)

Code "60 FPS Speed Lock" by "Skyth"
Write<float>(0x19FD2C, 60)
WriteNop(0xE7B5D7, 2)
WriteProtected<float>(0x1704258, 0.0166666666666667f)

Patch "Longer Blue Trail" by "TiMan & Nekit"
WriteProtected<ushort>(0xE5FB17, 0x9090)
WriteProtected<ushort>(0xE5FB19, 0x9090)
WriteProtected<ushort>(0xE5FB1B, 0x9090)
WriteProtected<byte>(0xE5FE10, 0x48)
WriteProtected<byte>(0xE5FE70, 0x48)

Patch "Stomp Keeps Horizontal Velocity" by "TGE"
string code = @"
movaps xmm1, [edi+0x290]
addps xmm0, xmm1
movaps [edi+0x290], xmm0"
WriteAsmHook(code, 0x01254D4C, HookBehavior.Replace)

Patch "Unleashed Sweepkick" by "N69"
WriteProtected<ushort>(0xDFF8D6, 0x5608)

Patch "No Trick Rainbow Rings" by "PTKickass"
WriteProtected<uint>(0x1672364, 0x5F6E6D63)
WriteProtected<uint>(0x1672368, 0x5F6A626F)
WriteProtected<uint>(0x167236C, 0x6E696172)
WriteProtected<uint>(0x1672370, 0x72776F62)
WriteProtected<uint>(0x1672374, 0x5F676E69)
WriteProtected<uint>(0x1672378, 0x4448)
WriteProtected<uint>(0x1672608, 0x5F6E6D63)
WriteProtected<uint>(0x167260C, 0x5F6A626F)
WriteProtected<uint>(0x1672610, 0x6E696172)
WriteProtected<uint>(0x1672614, 0x72776F62)
WriteProtected<uint>(0x1672618, 0x5F676E69)
WriteProtected<uint>(0x167261C, 0x4448)
WriteProtected<byte>(0x115B826, 0x2)

Patch "Ice Pillars Replace Fire Pillars" by "N69"
WriteProtected<byte>(0xE020EB, 0x1)
WriteProtected<byte>(0x16613CB, 0x31)
WriteProtected<byte>(0x16613D2, 0x31)
WriteProtected<uint>(0x166149E, 0x63697065)
WriteProtected<uint>(0x16614A2, 0x6E616C65)
WriteProtected<ushort>(0x16614A6, 0x5F5F)

Patch "Fix Skydive Collision Detection" by "N69"
WriteNop(0x119822E, 18)

Patch "All Rings Can Be Light Dashed" by "Skyth"
WriteProtected<uint>(0x105334D, 0x10C47C6)
WriteNop(0x1053351, 16)

Patch "Object Collision Debug View" by "Aruki"
Write<byte>(0x1E5E39B, 1)

Patch "Borderless Fullscreen" by "Sajid"
string code = @"mov eax,[ebp+18]
mov [eax+0x20],00000001
mov [eax+0x1C],00000000
mov [eax+0x30],00000000
mov [ebp-0x1C],ecx
push 0x00003210"
WriteAsmHook(code, 0xA5EB5B, HookBehavior.Replace)

Patch "No Out of Control Balloons" by "N69"
WriteProtected<uint>(0x11BEBAA, 0xB6E9)
WriteProtected<byte>(0x11BEBAE, 0x0)
WriteNop(0x11BEBAF, 2)

Patch "No Out of Control Jump Springs" by ""
WriteProtected<uint>(0x11BEA91, 0x1CFE9)
WriteProtected<ushort>(0x11BEA95, 0x8B00)
WriteProtected<byte>(0x11BEA97, 0x83)

Patch "Use Bumpers to Switch Grind Rails" by "Skyth"
WriteProtected<uint>(0xDFCC92, 0x10244C8B)
WriteNop(0xDFCC96, 2)
WriteProtected<ushort>(0xDFCC99, 0xE1BA)
WriteProtected<byte>(0xDFCC9B, 0xD)
WriteNop(0xDFCC9C, 3)
WriteProtected<byte>(0xDFCC9F, 0x73)
WriteProtected<uint>(0xDFCCA8, 0xCE1BA0F)
WriteNop(0xDFCCAC, 7)
WriteProtected<byte>(0xDFCCB3, 0x73)

Patch "No Boosting Animation When Grinding" by "Skyth"
WriteProtected<ushort>(0xDF2380, 0xA4E9)
WriteProtected<byte>(0xDF2382, 0x0)
WriteNop(0xDF2385, 1)

Code "All Walls Are Wall-Jumpable" by "SWS90"
Write<byte>(GetPointer(0x1E5E2F0, 0x80C), 1)

Patch "Tricks Don't Fill The Boost Gauge" by ""
WriteNop(0xE4B323, 8)
WriteNop(0xE4B353, 8)

Patch "Boost Gauge Starts Empty" by "PTKickass"
WriteProtected<uint>(0xE64F2F, 0x90C9570F)
WriteNop(0xE64F33, 4)

Code "Everything is 1/4 Speed Except For Sonic" by "Sajid"
Write<byte>(GetPointer(0x1E0BE5C, 8, 0x19D), 1)
Write<float>(GetPointer(0x1E0BE5C, 8, 0x1A4), 0.25f)

Code "Everything is 1/2 Speed Except For Sonic" by "Sajid"
Write<byte>(GetPointer(0x1E0BE5C, 8, 0x19D), 1)
Write<float>(GetPointer(0x1E0BE5C, 8, 0x1A4), 0.5f)

Code "Everything is 2x Speed Except For Sonic" by "Sajid"
Write<byte>(GetPointer(0x1E0BE5C, 8, 0x19D), 1)
Write<float>(GetPointer(0x1E0BE5C, 8, 0x1A4), 2)

Code "Everything is 4x Speed Except For Sonic" by "Sajid"
Write<byte>(GetPointer(0x1E0BE5C, 8, 0x19D), 1)
Write<float>(GetPointer(0x1E0BE5C, 8, 0x1A4), 4)

Code "Everything is 2x Speed" by "Darío"
Write<byte>(GetPointer(0x1E0BE5C, 8, 0x19C), 1)
Write<float>(GetPointer(0x1E0BE5C, 8, 0x1A0), 2)

Patch "Allow Multiple Instances" by "Sajid & Skyth"
WriteProtected<byte>(0xE7A6E6, 0x83)
WriteProtected<byte>(0xE7A6E7, 0xC4)
WriteProtected<byte>(0xE7A6E8, 0xC)
WriteNop(0xE7A6E9, 0x3)

Code "Disable Motion Blur" by "Skyth"
Write<byte>(0x1A43103, 0)

Code "Set Shadow Bias to 0.0002" by "Skyth"
Write<float>(0x1A4356C, 0.0002f)

Patch "Disable HUD in Stages" by "Sajid"
WriteProtected<uint>(0x586C94, 0x13EADA4)

Patch "Disable Sonic Smoke Trail" by "Sajid"
Write<byte>(0x1A44AE2, 0)
WriteNop(0x11A2D28, 23)

Patch "Disable Homing Attack" by "Sajid"
WriteProtected<float>(0x1704800, 0)

Patch "Controller Hotplugging Support" by "Skyth"
WriteProtected<byte>(0x9C85FA, 0x83)
WriteProtected<byte>(0x9C85FB, 0xFA)
WriteProtected<byte>(0x9C85FC, 0x4)
WriteNop(0x9C8603, 12)
WriteProtected<byte>(0x9C86B2, 0x83)
WriteProtected<byte>(0x9C86B3, 0xFA)
WriteProtected<byte>(0x9C86B4, 0x4)
WriteNop(0x9C86BB, 12)
WriteNop(0x9C8163, 2)
WriteNop(0x9C8168, 8)
WriteNop(0x9C8173, 1)
WriteProtected<byte>(0x9C8176, 0xE8)
WriteProtected<byte>(0x9C8177, 0xC7)
WriteProtected<byte>(0x9C8178, 0x40)
WriteProtected<byte>(0x9C8179, 0xC)
WriteProtected<byte>(0x9C817A, 0x4)
WriteProtected<byte>(0x9C817B, 0x0)
WriteProtected<byte>(0x9C817C, 0x0)
WriteProtected<byte>(0x9C817D, 0x0)
WriteNop(0x9C8A70, 2)
WriteNop(0x9C8AC0, 2)

Patch "Fix Boost Gauge Particles" by "Skyth"
WriteProtected<byte>(0x11AEC51, 0xB9, 0x00, 0x00, 0x34, 0x44, 0x66, 0x0F, 0x6E, 0xD1, 0xB9, 0x00, 0x00, 0xA0, 0x44, 0x66, 0x0F, 0x6E, 0xC1)
WriteNop(0x11AEC63, 22)

Patch "Homing Attack on Boost" by "SWS90"
WriteProtected<byte>(0x015FA418, 0)

Patch "Fix Sonic's Legs Swinging Too High" by "Skyth"
WriteProtected<byte>(0x117F371, 0xE9, 0x35, 0x02, 0x00, 0x00, 0x90);
WriteProtected<byte>(0x117F5C8, 0xEB);
